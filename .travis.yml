services:
  - docker

matrix:
  include:
    - language: node_js
      os: linux

      node_js:
        - 8
      
      before_install:
        - cd client
        - npm i yarn -g
        - sudo pip install --user awscli

      script:
        - yarn build

      cache:
        yarn: true
        directories:
          - node_modules
      
      before_deploy:
        - aws s3 rm s3://${S3_PRODUCTION_BUCKET_NAME} --recursive
        - yarn run copy-static

      deploy:
        # Deploy Front End to AWS S3 on successful build of master branch.
        on:
          branch: master
        provider: s3
        # You can refer to environment variables from Travis repo settings!
        access_key_id: $AWS_ACCESS_KEY_ID
        secret_access_key: $AWS_SECRET_ACCESS_KEY
        region: $AWS_REGION
        # Name of the S3 bucket to which your site should be uploaded.
        bucket: $S3_PRODUCTION_BUCKET_NAME
        # Prevent Travis from deleting your built site so it can be uploaded.
        skip_cleanup: true
        # Path to a directory containing your built site.
        local_dir: build
        # Set the Cache-Control header.
        cache_control: "max-age=21600"
        acl: public_read

    - sudo: false
      language: c
      os: linux

      addons:
        apt:
          packages:
            - libgmp-dev

      # Caching so the next build will be fast too.
      cache:
        directories:
          - $HOME/.ghc
          - $HOME/.cabal
          - $HOME/.stack

      before_install:
        - cd server
        - mkdir -p ~/.local/bin
          # Download and unpack the stack executable
        - travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
        - export PATH=$PATH:$HOME/.local/bin
          # Auth AWS for deployments
        - sudo pip install --user awscli

      install:
        - sudo pip install ansible
      
      script:
        - stack setup && stack --no-terminal --skip-ghc-check test
        - stack install # build and copies binary executable to build dir

      deploy:
        # Deploy Server to AWS EC2 on successful build of master branch.
        skip_cleanup: true # Don't remove built executable so we can copy into docker image
        on:
          branch: master
        script:
          - cd ansible
          # Build new Docker image and push to AWS Container Registry
          - ansible-playbook -i push-new-image.yml
          # Pull new image from registry and spin up new container on EC2 instance
          - ansible-playbook -i deploy-image.yml